#include "auth_system.h"
#include "settings.h"
#include "log_system.h"
#include "crypto_utils.h"
#include "password_policy.h"
#include <WebServer.h>
#include <ArduinoJson.h>

extern Settings settings;
extern WebServer server;
extern PasswordPolicy passwordPolicy;

static int loginAttempts = 0;
static unsigned long lockoutTime = 0;
const int MAX_LOGIN_ATTEMPTS = 5;
const unsigned long LOCKOUT_DURATION = 300000; // 5 dakika

// Y√∂netici bilgileri (sabit tanƒ±mlƒ±)
const String ADMIN_USERNAME = "eklim";
const String ADMIN_PASSWORD = "mdhc06*";

// Oturumu jeton ile kontrol et
bool checkSession() {
    String token = "";
    if (server.hasHeader("Authorization")) {
        // "Bearer a1b2c3d4..." formatƒ±nƒ± bekliyoruz
        String authHeader = server.header("Authorization");
        if (authHeader.startsWith("Bearer ")) {
            token = authHeader.substring(7);
        }
    }

    if (token.length() == 0 || settings.sessionToken.length() == 0 || token != settings.sessionToken) {
        return false;
    }

    if (millis() - settings.sessionStartTime > settings.SESSION_TIMEOUT) {
        settings.sessionToken = ""; // Jetonu ge√ßersiz kƒ±l
        addLog("Oturum zaman a≈üƒ±mƒ±na uƒüradƒ±", INFO, "AUTH");
        return false;
    }
    
    // Aktivite olduƒüunda oturum s√ºresini yenile
    settings.sessionStartTime = millis();
    return true;
}

void handleUserLogin() {
    // Rate limiting kontrol√º
    if (lockoutTime > 0 && millis() < lockoutTime) {
        unsigned long remainingTime = (lockoutTime - millis()) / 1000;
        addLog("√áok fazla ba≈üarƒ±sƒ±z giri≈ü denemesi. Kalan s√ºre: " + String(remainingTime) + "s", WARN, "AUTH");
        server.send(429, "application/json", 
            "{\"error\":\"√áok fazla ba≈üarƒ±sƒ±z deneme. " + String(remainingTime) + " saniye sonra tekrar deneyin.\"}");
        return;
    }

    String u = server.arg("username");
    String p = server.arg("password");

    // Input validation
    if (u.length() == 0 || p.length() == 0) {
        server.send(400, "application/json", "{\"error\":\"Kullanƒ±cƒ± adƒ± ve ≈üifre bo≈ü olamaz.\"}");
        return;
    }

    // Kullanƒ±cƒ± adƒ± ve ≈üifre uzunluk kontrol√º
    if (u.length() > 50 || p.length() > 100) {
        addLog("A≈üƒ±rƒ± uzun giri≈ü denemesi", WARN, "AUTH");
        server.send(400, "application/json", "{\"error\":\"Ge√ßersiz giri≈ü bilgileri.\"}");
        return;
    }

    // Y√ñNETƒ∞Cƒ∞ Gƒ∞Rƒ∞≈ûƒ∞ KONTROL√ú
    if (u == ADMIN_USERNAME && p == ADMIN_PASSWORD) {
        // Y√∂netici giri≈üi ba≈üarƒ±lƒ±
        settings.sessionToken = generateRandomToken(32);
        settings.sessionStartTime = millis();
        settings.isAdminSession = true; // Y√∂netici oturumu i≈üareti
        loginAttempts = 0;
        lockoutTime = 0;
        
        addLog("‚úÖ Y√ñNETƒ∞Cƒ∞ giri≈üi ba≈üarƒ±lƒ±: " + u, SUCCESS, "AUTH");
        
        // Y√∂netici i√ßin ≈üifre deƒüi≈ütirme zorunluluƒüu YOK
        String response = "{";
        response += "\"success\":true,";
        response += "\"token\":\"" + settings.sessionToken + "\",";
        response += "\"mustChangePassword\":false,"; // Her zaman false
        response += "\"isAdmin\":true,"; // Y√∂netici i≈üareti
        response += "\"redirectUrl\":\"/\"";
        response += "}";
        
        server.send(200, "application/json", response);
        return;
    }

    // NORMAL KULLANICI Gƒ∞Rƒ∞≈ûƒ∞ KONTROL√ú
    if (u == settings.username) {
        String hashedAttempt = sha256(p, settings.passwordSalt);
        if (hashedAttempt == settings.passwordHash) {
            settings.sessionToken = generateRandomToken(32);
            settings.sessionStartTime = millis();
            settings.isAdminSession = false; // Normal kullanƒ±cƒ± oturumu
            loginAttempts = 0;
            lockoutTime = 0;
            
            addLog("‚úÖ Ba≈üarƒ±lƒ± giri≈ü: " + u, SUCCESS, "AUTH");
            
            // Parola deƒüi≈ütirme kontrol√º - LOGIN SONRASI
            bool mustChange = mustChangePassword();
            
            addLog("Parola deƒüi≈ütirme zorunlu mu? " + String(mustChange ? "EVET" : "HAYIR"), INFO, "AUTH");
            
            // JSON response
            String response = "{";
            response += "\"success\":true,";
            response += "\"token\":\"" + settings.sessionToken + "\",";
            response += "\"mustChangePassword\":" + String(mustChange ? "true" : "false");
            response += ",\"isAdmin\":false"; // Normal kullanƒ±cƒ±
            
            if (mustChange) {
                response += ",\"redirectUrl\":\"/password_change.html\"";
                if (passwordPolicy.isDefaultPassword) {
                    response += ",\"reason\":\"ƒ∞lk giri≈üinizde varsayƒ±lan kullanƒ±cƒ± adƒ± ve parolayƒ± deƒüi≈ütirmeniz gerekmektedir.\"";
                    addLog("Sebep: Varsayƒ±lan parola", INFO, "AUTH");
                } else if (isPasswordExpired()) {
                    response += ",\"reason\":\"Parolanƒ±zƒ±n s√ºresi dolmu≈ütur. Yeni kullanƒ±cƒ± adƒ± ve parola belirlemeniz gerekmektedir.\"";
                    addLog("Sebep: Parola s√ºresi dolmu≈ü", INFO, "AUTH");
                }
            } else {
                response += ",\"redirectUrl\":\"/\"";
                addLog("Normal ana sayfaya y√∂nlendirme", INFO, "AUTH");
            }
            response += "}";
            
            addLog("JSON yanƒ±t hazƒ±rlandƒ±: " + response.substring(0, 50) + "...", INFO, "AUTH");
            server.send(200, "application/json", response);
            return;
        }
    }

    // Ba≈üarƒ±sƒ±z giri≈ü i≈ülemi
    loginAttempts++;
    addLog("‚ùå Ba≈üarƒ±sƒ±z giri≈ü denemesi (#" + String(loginAttempts) + "): " + u, ERROR, "AUTH");

    // Maksimum deneme sayƒ±sƒ±na ula≈üƒ±ldƒ± mƒ±?
    if (loginAttempts >= MAX_LOGIN_ATTEMPTS) {
        lockoutTime = millis() + LOCKOUT_DURATION;
        addLog("üîí IP adresi " + String(LOCKOUT_DURATION/1000) + " saniye kilitlendi", WARN, "AUTH");
        server.send(429, "application/json", 
            "{\"error\":\"√áok fazla ba≈üarƒ±sƒ±z deneme. " + String(LOCKOUT_DURATION/1000) + " saniye sonra tekrar deneyin.\"}");
        return;
    }

    server.send(401, "application/json", "{\"success\":false, \"error\":\"Kullanƒ±cƒ± adƒ± veya ≈üifre hatalƒ±!\"}");
}

void handleUserLogout() {
    settings.sessionToken = "";
    settings.isAdminSession = false; // Y√∂netici oturumunu temizle
    addLog("üö™ √áƒ±kƒ±≈ü yapƒ±ldƒ±", INFO, "AUTH");
    server.send(200, "application/json", "{\"success\":true}");
}

// Sadece gelen jetonun ge√ßerli olup olmadƒ±ƒüƒ±nƒ± kontrol eder (WebSocket i√ßin)
bool isTokenValid(const String& token) {
    if (token.length() == 0 || settings.sessionToken.length() == 0 || token != settings.sessionToken) {
        return false;
    }

    if (millis() - settings.sessionStartTime > settings.SESSION_TIMEOUT) {
        return false;
    }

    // WebSocket aktivitesi i√ßin oturum s√ºresini yenilemeyelim,
    // bu sadece API isteklerinde olmalƒ±.
    return true;
}

// Y√∂netici oturumu kontrol√º
bool isAdminSession() {
    return settings.isAdminSession;
}